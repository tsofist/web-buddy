rules:
  prettier/prettier: error
  '@typescript-eslint/explicit-member-accessibility':
    - error
    - accessibility: no-public

  # todo https://typescript-eslint.io/rules/ban-types/
  '@typescript-eslint/ban-types':
    - warn
    - extendDefaults: true
      types:
        Record:
          message: 'Avoid using the Record type as it may pose some risks. Instead, consider using the @tsofist/stem: PRec/Rec type (Your Stem. With LOVE).'
          suggest:
            - PRec
            - Rec

  # '@typescript-eslint/no-restricted-types':
  #   - warn
  #   - types:
  #       Record:
  #         message: 'Avoid using the Record type as it may pose some risks. Instead, consider using the @tsofist/stem: PRec/Rec type (Your Stem. With LOVE).'
  #         suggest:
  #           - PRec
  #           - Rec

  '@typescript-eslint/ban-ts-comment':
    - error
    - minimumDescriptionLength: 7
      ts-expect-error: allow-with-description
      ts-nocheck: allow-with-description
      ts-ignore: true
      ts-check: false
  '@typescript-eslint/explicit-module-boundary-types': off
  '@typescript-eslint/no-explicit-any': off
  '@typescript-eslint/no-non-null-assertion': off
  '@typescript-eslint/no-this-alias': error
  '@typescript-eslint/return-await': off
  '@typescript-eslint/no-floating-promises': error
  '@typescript-eslint/no-unnecessary-type-assertion': error
  '@typescript-eslint/no-unnecessary-condition': off
  '@typescript-eslint/no-misused-new': error
  '@typescript-eslint/no-misused-promises': off
  '@typescript-eslint/no-array-constructor': error
  '@typescript-eslint/no-useless-constructor': error
  '@typescript-eslint/adjacent-overload-signatures': error
  '@typescript-eslint/consistent-type-assertions': error
  '@typescript-eslint/semi': error
  '@typescript-eslint/member-delimiter-style':
    - error
    - multiline:
        delimiter: semi
        requireLast: true
      singleline:
        delimiter: semi
        requireLast: false

  space-before-function-paren: off
  '@typescript-eslint/space-before-function-paren':
    - warn
    - anonymous: always
      named: never
      asyncArrow: always

  '@typescript-eslint/no-meaningless-void-operator': error

  '@typescript-eslint/no-redundant-type-constituents': off

  '@typescript-eslint/method-signature-style':
    - error
    - property

  lines-between-class-members: off
  '@typescript-eslint/lines-between-class-members':
    - error
    - always
    - exceptAfterOverload: true
      exceptAfterSingleLine: true

  indent: off
  '@typescript-eslint/indent': off # prettier

  no-unused-vars: off
  '@typescript-eslint/no-unused-vars': off

  no-trailing-spaces:
    - error

  decorator-position/decorator-position:
    - error
    - properties: above
      methods: above

  space-in-parens: error

  func-call-spacing: off
  '@typescript-eslint/func-call-spacing': error

  '@typescript-eslint/unbound-method':
    - error
    - ignoreStatic: true

  '@typescript-eslint/no-invalid-void-type':
    - error
    - allowAsThisParameter: true
      allowInGenericTypeArguments: true

  '@typescript-eslint/no-confusing-void-expression':
    - error
    - ignoreArrowShorthand: true
      ignoreVoidOperator: true

  '@typescript-eslint/restrict-plus-operands':
    - error
    - allowAny: false
      allowBoolean: false
      allowNullish: false
      allowNumberAndString: false
      allowRegExp: false

  '@typescript-eslint/restrict-template-expressions':
    - error
    - allowAny: false
      allowNullish: false
      allowRegExp: false
      allowNumber: true
      allowBoolean: true
      allowNever: true

  '@typescript-eslint/no-wrapper-object-types': error

  # It doesn’t work properly in some cases
  '@typescript-eslint/unified-signatures': off

  # It doesn’t work properly in some cases
  '@typescript-eslint/no-unsafe-enum-comparison': off

  # It breaks the annotation logic
  '@typescript-eslint/no-duplicate-type-constituents': off

  # It's fine in general
  '@typescript-eslint/no-dynamic-delete': off

  # It’s covered by the compilerOptions.strict setting
  '@typescript-eslint/no-unsafe-assignment': off

  # It's works quirky in some cases
  '@typescript-eslint/no-unsafe-call': off

  '@typescript-eslint/no-extraneous-class':
    - error
    - allowWithDecorator: true
      allowStaticOnly: true

  # "stricter" rules -->
  '@typescript-eslint/no-unsafe-argument': off
  '@typescript-eslint/no-unsafe-member-access': off
  '@typescript-eslint/no-unsafe-return': off
  # <--
